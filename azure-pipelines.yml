# Xcode
# Build, test, and archive an Xcode workspace on macOS.
# Add steps that install certificates, test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xcode

trigger:
- master

pool:
  vmImage: 'macos-latest'

variables:
    scheme: 'web-view'
    sdk: 'iphoneos'
    buildConfiguration: 'Release'
    TEAM_ID: 'ALA95YMJ5Z'
steps:

- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'ionicblank-certificates.p12'
    certPwd: "$(CERT_PASSWORD)"
    keychain: 'temp'
    keychainPassword: "$(KEY_CHAIN_PASSWORD)"

- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'ionicblank.mobileprovision'

- script: |
    sudo gem install cocoapods
    pod install
    echo 'source "https://rubygems.org"
          gem "fastlane", ">= 2.221.1"' > Gemfile
    sudo gem install bundler
    sudo gem install fastlane
    bundle install
  displayName: 'Install Bundler, Fastlane，cocoapods and dependencies'

# - script: |
#     xcodebuild -list -workspace '/Users/runner/work/1/s/web-view.xcodeproj/project.xcworkspace'
#   displayName: 'List Xcode Schemes'

- script: |
    echo "Generating exportOptionsPlist..."
    cat <<EOF > $(System.DefaultWorkingDirectory)/_XcodeTaskExportOptions.plist
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>teamID</key>
        <string>$(TEAM_ID)</string>
        <key>method</key>
        <string>app-store</string>
        <key>uploadSymbols</key>
        <true/>
        <key>compileBitcode</key>
        <true/>
        <key>signingStyle</key>
        <string>automatic</string>
    </dict>
    </plist>
    EOF
  displayName: 'Generate exportOptionsPlist'

- task: Xcode@5
  inputs:
    actions: 'build'
    scheme: $(scheme)
    sdk: $(sdk)
    configuration:  $(buildConfiguration)
    xcWorkspacePath: '/Users/runner/work/1/s/web-view.xcodeproj/project.xcworkspace'
    xcodeVersion: 'default' # Options: 8, 9, 10, 11, 12, default, specifyPath
    packageApp: true
    exportMethod: 'app-store'
    exportPath: 'output/$(buildConfiguration)/$(sdk)'
    exportOptionsPlist: '$(System.DefaultWorkingDirectory)/_XcodeTaskExportOptions.plist'
    teamId: $(TEAM_ID)
    #signingOption: 'auto'
    #signingOption: 'manual'
    args: '-allowProvisioningUpdates'  # 允许 Xcode 自动处理配置文件
- script: |
    pwd
    ls -R .
    tree -d .
  displayName: 'List generated files'
# - script: |
#     echo 'source "https://rubygems.org"
#           gem "fastlane", ">= 2.221.1"' > Gemfile
#     bundle install
#   displayName: 'Create Gemfile and Install Dependencies'
  




# - script: |
#     mkdir -p fastlane
#     echo 'require "json"
#           default_platform(:ios)
#           lane :upload do
#             api_key_json = JSON.parse(ENV["APP_STORE_CONNECT_API_KEY_JSON"])
#             api_key = app_store_connect_api_key(
#               key_id: api_key_json["key_id"],
#               issuer_id: api_key_json["issuer_id"],
#               key_content: api_key_json["private_key"]
#             )
#             build_app(scheme: "", export_method: "app-store", output_directory: "./output")
#             upload_to_testflight(api_key: api_key)
#           end' > fastlane/Fastfile
#   displayName: 'Configure Fastlane'


- script: |
    mkdir -p fastlane
    echo "apple api key id: "$(APPLE_API_KEY_ID)
    echo 'default_platform(:ios)
          lane :upload do
            api_key = app_store_connect_api_key(
              key_id: ENV["APPLE_API_KEY_ID"],
              issuer_id: ENV["APPLE_API_ISSUER_ID"],
              key_content: ENV["APPLE_API_PRIVATE_KEY"]
            )
            #build_app(scheme: "", export_method: "app-store", output_directory: "./output")
            #upload_to_testflight(api_key: api_key)
            upload_to_testflight(
              api_key: api_key, 
              skip_waiting_for_build_processing: true,
              ipa: "./output/$(buildConfiguration)/$(sdk)/$(scheme).ipa"
            )
          end' > fastlane/Fastfile
  displayName: 'Configure Fastlane'
  
# - script: |
#     mkdir -p fastlane
#     echo 'json_key_content("$(APP_STORE_CONNECT_API_KEY_JSON)")' > fastlane/Appfile
#     echo 'default_platform(:ios)
#           lane :upload do
#             app_store_connect_api_key(
#               key_id: ENV['APPLE_API_KEY_ID'],
#               issuer_id: ENV['APPLE_API_ISSUER_ID'],
#               key_content: ENV['APP_STORE_CONNECT_API_KEY_JSON']
#             )
#             build_app(scheme: "YourAppScheme", export_method: "app-store", output_directory: "./output")
#             upload_to_testflight
#           end' > fastlane/Fastfile
#   displayName: 'Configure Fastlane'

- script: |
    bundle exec fastlane upload
  displayName: 'Upload to TestFlight'

# - task: UsePythonVersion@0
#   inputs:
#     versionSpec: '3.x'
#     addToPath: true

# - script: |
#     pip install --upgrade pip
#     pip install fastlane
#   displayName: 'Install Fastlane'

# - script: |
#     mkdir -p fastlane
#     echo 'json_key_content("$(APP_STORE_CONNECT_API_KEY_JSON)")' > fastlane/Appfile
#     echo 'default_platform(:ios)
#           lane :upload do
#             build_app(scheme: "", export_method: "app-store", output_directory: "./output")
#             upload_to_testflight
#           end' > fastlane/Fastfile
#   displayName: 'Configure Fastlane'

# - script: |
#     fastlane upload
#   displayName: 'Upload to TestFlight'